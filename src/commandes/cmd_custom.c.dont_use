# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    cmd_custom.c.dont_use                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jolecomt <jolecomt@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/02/10 01:15:03 by jolecomt          #+#    #+#              #
#    Updated: 2024/02/21 05:45:47 by jolecomt         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../inc/minishell.h"

extern t_glob	g_global;

static void	update_output(char ***matrix, int fd, t_glob g_global)
{
	char	**aux;
	char	*temp;
	char	*line;

	aux = NULL;
	line = NULL;
	while (1)
	{
		line = get_next_line(fd);
		if (!line)
			break ;
		temp = ft_strtrim(line, "\n", &g_global.gc);
		free(line);
		aux = ft_extend_matrix(aux, temp);
	}
	ft_free_matrix(matrix);
	*matrix = aux;
}

void	exec_custom(char ***out, char *full, char *args, char **envp, t_glob g_global)
{
	pid_t	pid;
	int		fd[2];
	char	**matrix;

	pipe(fd);
	pid = fork();
	if (!pid)
	{
		ft_close(fd[READ_END]);
		matrix = ft_split(args, ' ', &g_global.gc);
		dup2(fd[WRITE_END], STDOUT_FILENO);
		ft_close(fd[WRITE_END]);
		if (!access(full, F_OK))
			execve(full, matrix, envp);
		gc_clean(&g_global.gc);
		exit (1);
	}
	ft_close(fd[WRITE_END]);
	waitpid(pid, &g_global.g_state, 0);
	update_output(out, fd[READ_END],g_global);
	ft_close(fd[READ_END]);
}
